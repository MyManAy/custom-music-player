import Head from "next/head";
import React from "react";
import BasicTable from "~/components/BasicTable";
import router, { useRouter } from "next/router";
import { Song } from "~/components/BasicTable";
import Spinner from "~/components/Spinner";
import BottomPlayer from "~/components/BottomPlayer";
import {
  fetchPlaylistData,
  convertDataToSongsFormat,
} from "~/utils/playlistsFunctions";
import { Howl } from "howler";

interface StaticProps {
  savedIds: string[];
}

const redirect = async () => {
  await router.push({ pathname: `/`, query: { auth_timed_out: true } });
};

const Home = ({ savedIds }: StaticProps) => {
  const router = useRouter();
  const playlistId = router.query["id"];
  const playlistName = router.query["playlist_name"];
  const playlistImgSrc = router.query["playlist_img_src"];
  const givenToken = router.query["token"];
  const [songs, setSongs] = React.useState(null as null | Song[]);
  const [howl, setHowl] = React.useState(null as null | Howl);
  const [src, setSrc] = React.useState(null as null | string);

  // const [isPlaying, setIsPlaying] = React.useState(false);
  const songsAvailableToDownload = React.useRef(false);

  const downloadSongs = (songs: Song[]) => {
    const recentlyDownloaded = [] as string[];
    return songs.map((song) => async () => {
      if (savedIds.includes(song.id)) return;
      console.log("fetching: " + song.id);
      try {
        await fetch(`http://localhost:9999/${song.id}`);
      } catch {
        console.log("oops again");
      } finally {
        console.log(songs);
        setSongs(
          songs.map((currentSong) =>
            currentSong.id === song.id
              ? { ...song, mp3Loaded: true }
              : recentlyDownloaded.includes(currentSong.id)
              ? { ...currentSong, mp3Loaded: true }
              : currentSong
          )
        );
        recentlyDownloaded.push(song.id);
      }
    });
  };

  React.useEffect(() => {
    if (router.isReady) {
      (async () => {
        const data = await fetchPlaylistData(
          playlistId as unknown as string,
          givenToken as unknown as string
        );
        const songs = convertDataToSongsFormat(data, savedIds);
        songsAvailableToDownload.current = true;
        setSongs(songs);
      })().catch((err) => {
        redirect().catch(() => console.log(err));
        // console.log(err);
      });
    }
  }, [router.isReady]);

  React.useEffect(() => {
    if (songsAvailableToDownload.current) {
      (async () => {
        songsAvailableToDownload.current = false;
        for (const download of downloadSongs(songs as unknown as Song[])) {
          try {
            await download();
          } catch {
            console.log("oops");
          }
        }
      })().catch((err) => {
        console.log(err);
      });
    }
  }, [songs]);

  React.useEffect(() => {
    if (howl) {
      howl.stop();
    }
    const sound = new Howl({
      src: src ?? `/songs/${songs?.[0]?.id ?? ""}.mp3`,
    });
    setHowl(sound);
    sound.play();
  }, [src]);

  const handleSongSelect = (id: string) => {
    setSrc(`/songs/${id}.mp3`);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 pt-16 pb-24 ">
          <div className="flex flex-row items-center justify-center gap-6">
            <div className="h-60 w-60">
              <img src={playlistImgSrc as unknown as string}></img>
            </div>

            <h1 className="text-8xl font-bold tracking-tighter text-black">
              {playlistName}
            </h1>
          </div>

          {songs ? (
            <BasicTable songs={songs} onRowClick={handleSongSelect} />
          ) : (
            <Spinner />
          )}
        </div>
        <BottomPlayer />
      </main>
    </>
  );
};

export async function getServerSideProps() {
  const res = await fetch("http://localhost:9999/getSavedIds");
  const ids = (await res.json()) as unknown as string[];

  return {
    props: {
      savedIds: ids,
    },
  };
}

export default Home;
