import Head from "next/head";
import React from "react";
import BasicTable from "~/components/BasicTable";
import router, { useRouter } from "next/router";
import { Song } from "~/components/BasicTable";
import Spinner from "~/components/Spinner";
import BottomPlayer from "~/components/BottomPlayer";
import { downloadSongs, fetchPlaylistData } from "~/utils/playlistsFunctions";
import { convertDataToSongsFormat } from "~/utils/playlistsFunctions";

interface StaticProps {
  savedIds: string[];
}

const redirect = async () => {
  await router.push({ pathname: `/`, query: { auth_timed_out: true } });
};

const Home = ({ savedIds }: StaticProps) => {
  const router = useRouter();
  const playlistId = router.query["id"];
  const playlistName = router.query["playlist_name"];
  const playlistImgSrc = router.query["playlist_img_src"];
  const givenToken = router.query["token"];
  const [songs, setSongs] = React.useState(null as null | Song[]);
  const songsAvailableToDownload = React.useRef(false);

  React.useEffect(() => {
    if (router.isReady) {
      (async () => {
        const data = await fetchPlaylistData(
          playlistId as unknown as string,
          givenToken as unknown as string
        );
        const songs = convertDataToSongsFormat(data, savedIds);
        songsAvailableToDownload.current = true;
        setSongs(songs);
      })().catch((err) => {
        redirect().catch(() => console.log(err));
      });
    }
  }, [router.isReady]);

  React.useEffect(() => {
    if (songsAvailableToDownload.current) {
      (async () => {
        songsAvailableToDownload.current = false;
        for (const download of downloadSongs(
          songs as unknown as Song[],
          savedIds,
          setSongs
        )) {
          try {
            await download();
          } catch {
            console.log("oops");
          }
        }
      })().catch((err) => {
        console.log(err);
      });
    }
  }, [songs]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex flex-row items-center justify-center gap-6">
            <div className="h-60 w-60">
              <img src={playlistImgSrc as unknown as string}></img>
            </div>

            <h1 className="text-8xl font-bold tracking-tighter text-black">
              {playlistName}
            </h1>
          </div>

          {songs ? <BasicTable songs={songs} /> : <Spinner />}
        </div>
        <BottomPlayer />
      </main>
    </>
  );
};

export async function getServerSideProps() {
  const res = await fetch("http://localhost:9999/getSavedIds");
  const ids = (await res.json()) as unknown as string[];

  return {
    props: {
      savedIds: ids,
    },
  };
}

export default Home;
