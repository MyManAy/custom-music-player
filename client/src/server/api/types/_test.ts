// Generated by ts-to-zod
import { z } from "zod";

export const routeHasSchema = z.union([
  z.object({
    type: z.union([
      z.literal("header"),
      z.literal("query"),
      z.literal("cookie"),
    ]),
    key: z.string(),
    value: z.string().optional(),
  }),
  z.object({
    type: z.literal("host"),
    key: z.undefined().optional(),
    value: z.string(),
  }),
]);

export const middlewareMatcherSchema = z.object({
  regexp: z.string(),
  locale: z.literal(false).optional(),
  has: z.array(routeHasSchema).optional(),
  missing: z.array(routeHasSchema).optional(),
});

const functionSchema = z.object({
  name: z.string(),
});

export default z.object({
  __BUILD_MANIFEST: z.record(z.array(z.string())).optional(),
  __BUILD_MANIFEST_CB: functionSchema.optional(),
  __MIDDLEWARE_MATCHERS: z.array(middlewareMatcherSchema).optional(),
  __MIDDLEWARE_MANIFEST_CB: functionSchema.optional(),
});
